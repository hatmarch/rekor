// Code generated by go-swagger; DO NOT EDIT.

// /*
// Copyright The Rekor Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sigstore/rekor/pkg/generated/models"
)

// GetLogEntryProofOKCode is the HTTP code returned for type GetLogEntryProofOK
const GetLogEntryProofOKCode int = 200

/*GetLogEntryProofOK Information needed for a client to compute the inclusion proof

swagger:response getLogEntryProofOK
*/
type GetLogEntryProofOK struct {

	/*
	  In: Body
	*/
	Payload *models.InclusionProof `json:"body,omitempty"`
}

// NewGetLogEntryProofOK creates GetLogEntryProofOK with default headers values
func NewGetLogEntryProofOK() *GetLogEntryProofOK {

	return &GetLogEntryProofOK{}
}

// WithPayload adds the payload to the get log entry proof o k response
func (o *GetLogEntryProofOK) WithPayload(payload *models.InclusionProof) *GetLogEntryProofOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get log entry proof o k response
func (o *GetLogEntryProofOK) SetPayload(payload *models.InclusionProof) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogEntryProofOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLogEntryProofNotFoundCode is the HTTP code returned for type GetLogEntryProofNotFound
const GetLogEntryProofNotFoundCode int = 404

/*GetLogEntryProofNotFound The content requested could not be found

swagger:response getLogEntryProofNotFound
*/
type GetLogEntryProofNotFound struct {
}

// NewGetLogEntryProofNotFound creates GetLogEntryProofNotFound with default headers values
func NewGetLogEntryProofNotFound() *GetLogEntryProofNotFound {

	return &GetLogEntryProofNotFound{}
}

// WriteResponse to the client
func (o *GetLogEntryProofNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetLogEntryProofDefault There was an internal error in the server while processing the request

swagger:response getLogEntryProofDefault
*/
type GetLogEntryProofDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLogEntryProofDefault creates GetLogEntryProofDefault with default headers values
func NewGetLogEntryProofDefault(code int) *GetLogEntryProofDefault {
	if code <= 0 {
		code = 500
	}

	return &GetLogEntryProofDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get log entry proof default response
func (o *GetLogEntryProofDefault) WithStatusCode(code int) *GetLogEntryProofDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get log entry proof default response
func (o *GetLogEntryProofDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get log entry proof default response
func (o *GetLogEntryProofDefault) WithPayload(payload *models.Error) *GetLogEntryProofDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get log entry proof default response
func (o *GetLogEntryProofDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogEntryProofDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
